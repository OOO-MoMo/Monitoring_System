@startuml
actor "Клиент" as Client
participant "Контроллер\n(Controller)" as Controller <<Presentation>>
participant "Сервис\n(Service)" as Service <<Business Logic>>
participant "Репозиторий\n(Repository)" as Repository <<Data Access>>
database "База Данных\n(Database)" as DB <<Persistence>>

Client -> Controller: HTTP Запрос (с DTO в теле)
activate Controller

Controller -> Controller: Валидация DTO
Controller -> Service: Вызов метода сервиса (передача DTO)
activate Service

Service -> Service: Бизнес-логика (преобразование DTO в Сущность, если нужно)
Service -> Repository: Вызов метода репозитория (передача Сущности или параметров)
activate Repository

Repository -> DB: SQL / JPA операция (e.g., SELECT, INSERT, UPDATE)
activate DB
DB --> Repository: Результат операции (e.g., Сущности, статус)
deactivate DB
Repository --> Service: Возврат результата (e.g., Сущности, статус)
deactivate Repository

Service -> Service: Дополнительная бизнес-логика (преобразование Сущности в DTO, если нужно)
Service --> Controller: Возврат результата (DTO)
deactivate Service

Controller -> Controller: Формирование HTTP Ответа (с DTO в теле)
Controller --> Client: HTTP Ответ
deactivate Controller

@enduml